(window.webpackJsonp=window.webpackJsonp||[]).push([[214],{539:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"code-splitting分割代码块-抽离第三方库代码与公共代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#code-splitting分割代码块-抽离第三方库代码与公共代码"}},[t._v("#")]),t._v(" code-splitting分割代码块(抽离第三方库代码与公共代码)")]),t._v(" "),a("h2",{attrs:{id:"module、chunk、bundle的意义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#module、chunk、bundle的意义"}},[t._v("#")]),t._v(" module、chunk、bundle的意义")]),t._v(" "),a("blockquote",[a("p",[t._v("module: 项目开发中的各个模块\nchunk: 代码块【通过import()动态引入的代码、通过"),a("a",{attrs:{href:"https://www.cnblogs.com/kwzm/p/10314438.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("splitChunks"),a("OutboundLink")],1),t._v("拆分出来的代码都可以看作chunk】\nbundle: webpack打包后的文件")])]),t._v(" "),a("h2",{attrs:{id:"splitchunks-分割公共的代码块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#splitchunks-分割公共的代码块"}},[t._v("#")]),t._v(" splitChunks - 分割公共的代码块")]),t._v(" "),a("p",[a("strong",[t._v("配置optimization中的splitChunks")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 默认配置：")]),t._v("\noptimization"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    splitChunks"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      chunks"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'async'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 默认只分割异步引入代码块,可配置为  all")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ......此处省略一些")]),t._v("\n      cacheGroups"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// splitChunks就是根据cacheGroups去拆分模块的")]),t._v("\n        vendors"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n         "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 表示只筛选从node_modules文件夹下引入的模块，所以node_modules下的第三方模块才会被拆分出来。")]),t._v("\n          test"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/[\\\\/]node_modules[\\\\/]/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n          priority"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 权重设置")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          minChunks"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n          priority"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n          reuseExistingChunk"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"不要弄混tree-shaking与code-splitting"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不要弄混tree-shaking与code-splitting"}},[t._v("#")]),t._v(" 不要弄混tree-shaking与code-splitting")]),t._v(" "),a("blockquote",[a("p",[t._v("tree-shaking 只是在引入变量的时候只对引入的变量做打包，关注的是import解构赋值方式的引入方式。\n"),a("a",{attrs:{href:"https://github.com/chaos-zhu/webpack_study/blob/master/note-md/06.tree-shaking.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("tree-shaking笔记"),a("OutboundLink")],1)])]),t._v(" "),a("blockquote",[a("p",[t._v("code-splitting 是将符合规则的文件单独进行打包进一个文件。【异步引入自动分割，同步引入需要非node_modules库代码则需要配置】")])]),t._v(" "),a("blockquote",[a("p",[a("a",{attrs:{href:"https://github.com/chaos-zhu/webpack_study/blob/master/note-md/07.codeSplitting-lazyLoad.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("code-splitting笔记"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=e.exports}}]);