(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{356:function(t,s,a){"use strict";a.r(s);var e=a(0),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"dockerfile构建镜像"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile构建镜像"}},[t._v("#")]),t._v(" Dockerfile构建镜像")]),t._v(" "),a("p",[a("strong",[t._v("以docker构建nuxt应用镜像为例，"),a("a",{attrs:{href:"https://github.com/chaos-zhu/temp-nuxt-framework-demo",target:"_blank",rel:"noopener noreferrer"}},[t._v("项目仓库"),a("OutboundLink")],1)])]),t._v(" "),a("h2",{attrs:{id:"编写dockerfile"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编写dockerfile"}},[t._v("#")]),t._v(" 编写Dockerfile")]),t._v(" "),a("h3",{attrs:{id:"基本构建镜像"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本构建镜像"}},[t._v("#")]),t._v(" 基本构建镜像")]),t._v(" "),a("div",{staticClass:"language-Dockerfile extra-class"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Docker环境声明，不存在则从dockerHub拉取")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("12.18.4\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# author")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("MAINTAINER")]),t._v(" chaoszhu\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 配置容器的系统环境变量: default_value默认为 '', 可在构建时指定 --build-arg cur_env=dev")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 构建时可传递")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ARG")]),t._v(" cur_env=default_value\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENV")]),t._v(" CUR_ENV=$cur_env\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 或者直接写死")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENV")]),t._v(" NODE_ENV production\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENV")]),t._v(" HOST 0.0.0.0\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# cd到/app 【指定工作目录(不存在会自动创建), 默认为镜像根目录/】")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 配置后下面所有的镜像目录操作都基于该目录")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WORKDIR")]),t._v(" /app\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 复制package.json到镜像根目录")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COPY")]),t._v(" package.json /\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 国内环境下构建配置npm仓库为taobao源")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" npm config set registry https"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("//registry.npm.taobao.org\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 安装依赖")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" npm install\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 复制项目目录所有文件到镜像根目录")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COPY")]),t._v(" . /\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 镜像暴露的端口（同nuxt.config.js配置的端口，默认3000）")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("EXPOSE")]),t._v(" 3000\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 打包")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" npm run build\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# docker run 才跑的命令")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CMD")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"npm"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"start"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n")])])]),a("h3",{attrs:{id:"多阶段镜像构建"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多阶段镜像构建"}},[t._v("#")]),t._v(" 多阶段镜像构建")]),t._v(" "),a("blockquote",[a("p",[t._v("仅构建nginx镜像")])]),t._v(" "),a("div",{staticClass:"language-Dockerfile extra-class"},[a("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# stage0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# As：自定义一个临时镜像名称【后面的阶段可以用到】")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" node As builder\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WORKDIR")]),t._v(" /\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# copy项目工程到 /")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COPY")]),t._v(" . .\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 安装依赖")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" npm install\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 打包")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" npm run build\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# stage1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" nginx\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# --from：指定stage0(builder)构建的目录, copy到当前镜像的/usr/share/nginx/html下")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COPY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("from=builder dist/* /usr/share/nginx/html\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("EXPOSE")]),t._v(" 80\n")])])]),a("h2",{attrs:{id:"构建镜像"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构建镜像"}},[t._v("#")]),t._v(" 构建镜像")]),t._v(" "),a("p",[a("code",[t._v("docker build --build-arg cur_env=uat -t imagesName:Tag .")])]),t._v(" "),a("blockquote",[a("ul",[a("li",[t._v("--build-arg cur_env=uat 指定Dockerfile配置文件中$cur_env变量")])])]),t._v(" "),a("blockquote",[a("ul",[a("li",[t._v("-t为指定镜像名称与版本号(tag)")])])]),t._v(" "),a("blockquote",[a("ul",[a("li",[t._v("最后的点表示为当前目录为docker构建镜像的上下文环境目录")])])]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",[t._v("docker构建时必须指定相同imagesName，否则无法使用docker的分层缓存机制(tag允许不同)")])]),t._v(" "),a("h2",{attrs:{id:"运行镜像"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运行镜像"}},[t._v("#")]),t._v(" 运行镜像")]),t._v(" "),a("p",[a("code",[t._v("docker run -d -p 8080:3000 IMAGE-ID/CONTAINER-ID")])]),t._v(" "),a("blockquote",[a("p",[t._v("-d为后台运行容器，并返回容器ID")])]),t._v(" "),a("blockquote",[a("p",[t._v("-p为指定宿主机端口映射到docker容器内的端口，即Dockerfile中配置的EXPOSE字段")])]),t._v(" "),a("h2",{attrs:{id:"知识点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#知识点"}},[t._v("#")]),t._v(" 知识点")]),t._v(" "),a("p",[a("strong",[a("a",{attrs:{href:"https://segmentfault.com/a/1190000018222648",target:"_blank",rel:"noopener noreferrer"}},[t._v("分层缓存机制参考文章"),a("OutboundLink")],1)])]),t._v(" "),a("blockquote",[a("ul",[a("li",[a("strong",[t._v("Docker构建是分层的，一条指令一层")]),t._v("，在没有带--no-cache=true指令的情况下如果某一层没有改动，Docker就不会重新构建这一层而是会使用缓存，如果第n层有改动，则n层以后的缓存都会失效")])])]),t._v(" "),a("blockquote",[a("ul",[a("li",[t._v("大多数情况下判断有无改动的方法是判断这层的指令和缓存中的构建指令是否一致，但是对于COPY和ADD命令会比较镜像内的文件和构建目录文件的做校验来判断本层是否有改动. 首次npm install会比较慢, 但得益于docker打包镜像的分层缓存机制. 在package.json文件"),a("strong",[t._v("没修改过")]),t._v("的前提下第二次构建会使用上一次的缓存。因此，如果package.json文件被修改过，则RUN npm install会被重新执行")])])]),t._v(" "),a("p",[a("strong",[t._v("【待解决问题】")]),a("br")]),t._v(" "),a("blockquote",[a("ul",[a("li",[t._v("每次构建完成会生成不一样的imagesID，考虑如何干掉原有的已启动容器，然后运行新构建的镜像")])])]),t._v(" "),a("h4",{attrs:{id:"更多命令查看"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#更多命令查看"}},[t._v("#")]),t._v(" "),a("router-link",{attrs:{to:"/back-end/docker/docker容器的基本操作.html"}},[t._v("更多命令查看")])],1)])}),[],!1,null,null,null);s.default=n.exports}}]);