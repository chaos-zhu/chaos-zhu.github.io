(window.webpackJsonp=window.webpackJsonp||[]).push([[143],{468:function(t,a,e){"use strict";e.r(a);var s=e(0),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"什么是事件循环机制event-loop"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是事件循环机制event-loop"}},[t._v("#")]),t._v(" 什么是事件循环机制Event loop")]),t._v(" "),e("h3",{attrs:{id:"明确"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#明确"}},[t._v("#")]),t._v(" 明确")]),t._v(" "),e("blockquote",[e("p",[t._v("浏览器环境与Node.js环境都具有事件循环的机制，这里主要讲浏览器的事件循环机制")])]),t._v(" "),e("h2",{attrs:{id:"前置知识"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前置知识"}},[t._v("#")]),t._v(" 前置知识")]),t._v(" "),e("blockquote",[e("p",[t._v("js是一门单线程、非阻塞的语言。\n单线程这意味着只有一个主线程来处理代码。")])]),t._v(" "),e("h2",{attrs:{id:"事件循环机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#事件循环机制"}},[t._v("#")]),t._v(" 事件循环机制")]),t._v(" "),e("blockquote",[e("p",[t._v("当线程处理到异步代码时不会立即停下来，而是将异步代码放入"),e("strong",[t._v("事件队列(Task Queue)")]),t._v("，被放入事件队列的异步代码不会立即执行，而是等待所有的同步代码执行完毕。主线程就会查找事件队列中是否存在任务，如果有则从中取出排在第一位的任务并执行。然后在执行其中的同步代码，一直循环到结束，这就是事件循环机制。")])]),t._v(" "),e("h2",{attrs:{id:"异步任务分为宏任务与微任务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#异步任务分为宏任务与微任务"}},[t._v("#")]),t._v(" 异步任务分为宏任务与微任务")]),t._v(" "),e("p",[t._v("常见宏任务：setInterval()、setTimeout()、requestAnimationFrame()\n常见微任务：Promise.then catch finally")]),t._v(" "),e("h2",{attrs:{id:"执行顺序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#执行顺序"}},[t._v("#")]),t._v(" 执行顺序")]),t._v(" "),e("blockquote",[e("p",[t._v("执行宏任务前会清空微任务\n"),e("img",{attrs:{src:"https://user-images.githubusercontent.com/44160914/84741750-1b143400-afe2-11ea-947f-b0658007043f.png",alt:"image"}})])])])}),[],!1,null,null,null);a.default=r.exports}}]);