(window.webpackJsonp=window.webpackJsonp||[]).push([[95],{421:function(t,o,_){"use strict";_.r(o);var v=_(0),r=Object(v.a)({},(function(){var t=this,o=t.$createElement,_=t._self._c||o;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"http-1-0-http-1-1-http-2-主要特性对比"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http-1-0-http-1-1-http-2-主要特性对比"}},[t._v("#")]),t._v(" HTTP/1.0 HTTP/1.1 HTTP/2 主要特性对比")]),t._v(" "),_("p",[_("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/61423830",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTTP 参考文章"),_("OutboundLink")],1)]),t._v(" "),_("p",[_("strong",[t._v("HTTP是一种无状态的【应用层】协议")])]),t._v(" "),_("blockquote",[_("p",[t._v("无状态：同一个客户端连续两次发送请求给服务器，服务器也识别不出这是同一个客户端发送的请求。")])]),t._v(" "),_("h2",{attrs:{id:"http-1-0"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http-1-0"}},[t._v("#")]),t._v(" HTTP/1.0")]),t._v(" "),_("h4",{attrs:{id:"缺点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#缺点"}},[t._v("#")]),t._v(" 缺点")]),t._v(" "),_("blockquote",[_("p",[t._v("1、无法复用连接：\nHTTP/1.0规定浏览器和服务器保持短暂的连接，浏览器的每次请求都需要与服务器建立一个TCP连接，服务器处理完成后立即断开TCP连接（无连接），服务器不跟踪每个客户端，也不记录过去的请求。（"),_("strong",[t._v("无状态")]),t._v("）")])]),t._v(" "),_("blockquote",[_("p",[t._v("2、队头阻塞：响应完当前请求才能继续发送下一个请求")])]),t._v(" "),_("h2",{attrs:{id:"http-1-1"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http-1-1"}},[t._v("#")]),t._v(" HTTP/1.1")]),t._v(" "),_("blockquote",[_("p",[t._v("继承了HTTP/1.0简单的特点，还解决了诸多HTTP/1.0性能上的问题")])]),t._v(" "),_("h3",{attrs:{id:"优点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#优点"}},[t._v("#")]),t._v(" 优点")]),t._v(" "),_("blockquote",[_("p",[t._v("1、"),_("strong",[t._v("长连接")]),t._v("：HTTP/1.1增加了一个Connection字段，默认为Keep-Alive可以保持HTTP连接不断开，即不进行四次挥手。(可手动关闭)")])]),t._v(" "),_("blockquote",[_("p",[t._v("2、"),_("strong",[t._v("管道化")]),t._v("：可以支持并行发送多个请求，但是响应还是得按照先后顺序。(浏览器默认禁用，因为没有从根本上解决问题)")])]),t._v(" "),_("h5",{attrs:{id:"_3、chrome对同一host最多允许6个并行tcp连接-源码写死"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3、chrome对同一host最多允许6个并行tcp连接-源码写死"}},[t._v("#")]),t._v(" 3、chrome对同一host最多允许6个并行TCP连接(源码写死)")]),t._v(" "),_("blockquote",[_("p",[t._v("HTTP/1.1下单个TCP连接对应单个http请求，现代浏览器允许同时"),_("strong",[t._v("进行多个TCP连接")]),t._v("，同时维护多个TCP连接达到并发请求的目的。也就是现代浏览器对"),_("strong",[t._v("同一host")]),t._v("下并行加载6~8个资源的限制。【通过建立多个TCP链接实现并行】")])]),t._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),_("p",[_("strong",[t._v("HTTP/1.1实现的并发")])]),t._v(" "),_("blockquote",[_("ul",[_("li",[t._v("chrome在HTTP/1.1协议下对同一host有6个tcp连接并发的限制。如果所有资源部署在同一台机器上，意味浏览器在HTTP/1.1下同时最高并发6个http请求。想要同时"),_("strong",[t._v("并发")]),t._v("达到更多的请求需要在不同的host服务上部署资源，也称域分片")])])]),t._v(" "),_("p",[t._v("如果已经部署HTTP/2的话，不要使用"),_("strong",[t._v("域分片")]),t._v("概念，因为HTTP/2多路复用可以并发多个请求")]),t._v(" "),_("p",[_("strong",[t._v("HTTP/2实现的并发")])]),t._v(" "),_("blockquote",[_("ul",[_("li",[t._v("得益于多路复用特性，浏览器在http/2协议下对单一tcp请求可以并行发送多个http请求")])])]),t._v(" "),_("p",[_("strong",[_("a",{attrs:{href:"https://developers.google.com/web/tools/chrome-devtools/network/understanding-resource-timing",target:"_blank",rel:"noopener noreferrer"}},[t._v("chrome官方文档"),_("OutboundLink")],1)])])]),t._v(" "),_("h5",{attrs:{id:"_4、缓存处理-强缓存-协商缓存-：参考文章"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4、缓存处理-强缓存-协商缓存-：参考文章"}},[t._v("#")]),t._v(" 4、"),_("strong",[t._v("缓存处理(强缓存&协商缓存)")]),t._v("："),_("a",{attrs:{href:"http://www.yangzicong.com/article/12",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考文章"),_("OutboundLink")],1)]),t._v(" "),_("p",[_("strong",[t._v("强缓存(本地缓存)使用响应头")]),t._v(" "),_("strong",[t._v("Cache-Control")]),t._v("或"),_("strong",[t._v("Expires")]),t._v("(1.0版本,不推荐)控制。")]),t._v(" "),_("blockquote",[_("p",[t._v("Cache-Control: max-age=3600 // 缓存有效倒计时")])]),t._v(" "),_("blockquote",[_("p",[t._v("Cache-Control: no-store/no-cache // 不使用缓存")])]),t._v(" "),_("p",[_("strong",[t._v("协商缓存被下面两组配合控制")])]),t._v(" "),_("blockquote",[_("p",[t._v("请求头"),_("strong",[t._v("If-Modified-Since:< date >")]),t._v(" 与 响应头"),_("strong",[t._v("Last-Modified")]),t._v("【判断两组时间是否一致】")])]),t._v(" "),_("blockquote",[_("p",[t._v("请求头"),_("strong",[t._v("If-None-Match: "),_("etag")],1),t._v(" 与 响应头"),_("strong",[t._v("etag")]),t._v("【判断两组标签是都一致】")])]),t._v(" "),_("h2",{attrs:{id:"http-2"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http-2"}},[t._v("#")]),t._v(" HTTP/2")]),t._v(" "),_("blockquote",[_("p",[t._v("1、多路复用 【实现真正的并行传输】")])]),t._v(" "),_("p",[t._v("一次TCP握手，多个同域并行请求，请求和响应同时发送与接收，然后再拼装组合，不阻塞。而这个强大的功能则是基于“二进制分帧”的特性。")]),t._v(" "),_("blockquote",[_("p",[t._v("2、头部压缩")])]),t._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),_("p",[t._v("在 HTTP/1 中，HTTP 请求都是由「 "),_("strong",[t._v("请求行")]),t._v(" + "),_("strong",[t._v("请求头")]),t._v(" + "),_("strong",[t._v("请求体")]),t._v(" 」三部分组成 (响应也是三部分: 「 "),_("strong",[t._v("响应行")]),t._v(" + "),_("strong",[t._v("响应头")]),t._v(" + "),_("strong",[t._v("响应体")]),t._v(" 」)")]),t._v(" "),_("p",[t._v("一般而言，"),_("strong",[t._v("请求体")]),t._v(" 都会经过 gzip 压缩，但 "),_("strong",[t._v("请求行")]),t._v(" 和 "),_("strong",[t._v("请求头")]),t._v(" 却没有经过任何压缩，直接以纯文本传输。")]),t._v(" "),_("p",[t._v("每个页面产生的请求数也越来越多, 消耗在头部的流量就会越多，尤其是每次都要传输 UserAgent、Cookie 这类不会频繁变动的内容，完全是一种浪费。")])]),t._v(" "),_("blockquote",[_("p",[t._v("3、服务器推送")])]),t._v(" "),_("p",[t._v("主动向客户端推送，不需要客户端请求，nginx可配置，参见 "),_("a",{attrs:{href:"https://www.ruanyifeng.com/blog/2018/03/http2_server_push.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTTP/2 服务器推送教程"),_("OutboundLink")],1)])])}),[],!1,null,null,null);o.default=r.exports}}]);